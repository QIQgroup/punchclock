+Forgot to PunchIn precise time because of folder creation
+Cleaned up the JSON Command Singleton
Specifically:
Minimal: kind,kindid, dataid, (itemid if cc)
Set ID and KindMachineName to JSON (all should be renamed at once to 'ProjectJSONdata')
Set ID and DataMachineName to JSON
All other datapoints from the JSON
string parsing all from $kind_json and $data_json
+Fine Tune Singleton Script
+It is working. 
The UNIX mkdir (original) 
And the first core-status Project/Drush!
Everything is downhill from here, yes?
+Back at it with resolving the Resolve Fieldnames within the Singleton
+More Good Work.
Unexpectedly a MAJOR STEP FORWARD so far as 
"Object Relational Mapping" (Quasi-FM)
Externally Called Script to Ensure All Fields of the Target Table have been accounted for.
IF NOT: It is a User-Interface to Select whether to Resolve, Skip or Pending!
Worked like a charm just now. Ready to begin again with the Singleton Devel & Testing
+Punchin Back to Data Items Records
+SwitchToMailChimp
+Little bit before MailChimp
+Okay!
Mechanism to gather INSTANTIATE/CLEAR_CACHE ($deve->SKIP) JSON for all 
Kind/Data Joins
Pretty Big, Actual INSTANTIATE/CLEAR_CACHE should be pretty easy.
+PunchIn 'Cooking with Gas!'
+Forgot to PunchOut, so Now giving myself 3hrs, it was more, but...
+Make a Dedicated Proc to Write to (two) drush json files
+Nice UI (Terminal Field)
Confirm Create Directories Code
Good Fields for Data
More work with OFWO Scripts
Beginning of thinking for Items records
+Took me where I didn't expect yesterday, but really good. Let's PunchIn
+Lots of good 'Base' work, OnFirstWindowOpen Trigger etc. Checking Directories, touch touch.txt, $$session_variables for $$base_path and $$filemaker_fileextension
+Harvest for previous Commit the data to the Library
+Retooled the Whole thing as per PunchClock Git Initial Commit
Project Table ('everyeight' being one)
Library Table (individual Modules [themes, other?])
Package Table (group of Modules expected to work togher [Meida Library being first, before it went to Core]
Data Table (a library of [usually drush] gathered data [usually JSON] that work to Manage the Projects, Library, Packages)
Item Table (a Big Fat JOIN Table of the other 4)
+PunchIn for new work (according to brainstorm below)
+PunchOut for 1 day credit
+Initial Commit
I've already done a good hunk of work without tracking it (or not tracking it properly.
Keep track of all Modules for All Projects dynamically via Drush Commands (best via JSON)
Maybe Fields for each of these reports that can hold the most recent JSON
Maybe logic that writes the file to a Stamped copy of the JSON
And then Dynamically Write that to a Gold filename (see below) maybe in its own Directory for dynamic feeding.
drupal Key (same as MD5 UNO Password - etc)
data Key (should be a table)
NOT 'report' since that is what comes from the 'data'
dataKey__drupalKey_YYYYMMDDHHIISS.json
dataKey_drupalKey.json (GOLD)
